.= torg + 1000

; Test if given string is lexicographically the first n-length string.
;Inputs:    str [inline] = Address of string.
;           length [inline] = of string.
;Output:    [stack] 1 or 0.
;Stack:     r5 -> output (unintialized) -> ...
isStart:


; Cycle through strings in alphabet.
;Inputs:    str [stack] = Address of string.
;           length [stack].
;Effect:    str is replaced with the following string (lexicographically, cyclic).
;Stack:     pc -> length -> str -> ...
nextString:


; Test if given strings are the same.
;Inputs:    str1, str2 [stack].
;Output:    [stack] 1 iff str1 == str2.
;Stack:     pc -> str1 -> str2 -> output (uninitialized) -> ...
wordsEqual:


; Test whether all words in the given sentence are valid terms.
;Inputs:    dict [stack] = address of array of addresses of terms.
;           dictLength [stack].
;           sent [stack] = address of sentence (string).
;           delim [stack] = delimiter character.
;Output:    [stack] 1 iff each word in sentence matches some dictionary-term.
;           Note: words are sub-strings seperated by one or more instances of `delim`.
;Stack:     pc -> delim -> sent -> dictLength -> dict -> output (uninitialized) -> ...
sentInDict:



;GLOBALS

.= torg + 12000
Setmin: .byte 'A
Setmax: .byte 'C
Delim: .byte ' ;this is a space
.even
Dict: .word word1, word2, word3, word4
DictLen: .word 4
Sent: .ascii <AB@>
.even
X: .word 4
MaxLen: .word 6
word1: .ascii <AC@>
word2: .ascii <B@>
word3: .ascii <C@>
word4: .ascii <@>
.even

Output: .blkw 40
.even