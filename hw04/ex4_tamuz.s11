cls =   177546
tks =   177560
tkb =   177562
tps =   177564
tpb =   177566

TICKS   =   62  ;50. in decimali
LF      =   12
CR      =   15
ENTER   =   7412 ;LF + CR 00001111 00001100
BACKSPACE = 10
;NIL     =   #0
MAX_INPUT = 6

. = torg + 1000
main:
    mov #main,      sp   ;start the stack
    ; mov #printer,   @#20    ;register printer vector
    ; mov #200,       @#22
    mov #keyboard,  @#60    ;register keyboard vector
    mov #200,       @#62
    ; mov #clock,     @#100   ;register clock vector
    ; mov #300        @#102
    bis #101,       @#tks   ;turn on the keyboard
    br .            ;endless loop here


; Tests whether given string is prefix for sentence.
;inputs: r0=setence, r1=prefix, r2=max number of typos.
;output: r1= 1 if valid prefix, 0 otherwise.
dictPrefix:
    mov r5, -(sp)
    mov r1, -(sp)   ;saving the prefix address
    mov r0, -(sp)   ;saving the word address
    mov r2, -(sp)   ;saving X
    mov r3, -(sp)   ;backing up the registers
    mov r4, -(sp)

    ;we add to the stack X time '1'.
    ;every '1' is a potential typo (when 1 represent the kind of typo).
    ;we want to examine each time a different combination of typos.
    ;we start by assuming every typo is from the first kind ('1').
    mov r2, r5  ;r5 will forever hold the maxTypos limit
    mov r2, r4  ;we put 2X into r4
    add r2, r4
    cmp r2, #0  ;if X = 0 ,no need to push typo combination to stack
    beq continue
    mov r2, r3  ;loop for X times. push typo combination to stack
    stackETypes:
        mov #1, -(sp)
        sob r3, stackETypes
    continue:
    mov #2, -(sp)
    runLetters:
        cmpb #'@, (r1)      ;reached end of prefix (success)
        beq success1
        cmpb #'@, (r0)      ;reached end of word (probably failure)
        beq wordEnded
        jsr pc, chkLetters  ;compare current letter between prefix & word.
        cmp (sp), #0          ;if the "prefix" is not really a prefix to the word (even with X mistakes).
        beq failure1
        br runLetters   ;we go to the next letter.
 success1:   ;found match
    tst r5
    beq success2
    cmp r2, r5      ;if we got 0 typos when we expect for more, then fail
    beq failure1
 success2:
    mov #1, r1
    br end1
 failure1:   ;return failure
    mov #0, r1
    br end1
 wordEnded:    ;check if we can spare more typos
    tst r2
    beq failure3
    check:  ;chech if we have more typos to spare then characters left in prefix (success)
        tstb (r1)+
        cmpb (r1), #'@
        beq success1
        sob r2, check
 ;failure. now we try again with differnt typo type combination (advance with nextType)
 failure3:
    ;if X=0 then we have failed
    cmp r4, #0
    beq failure1
    ;nextType build by assuming 2 more functions were called before it. so we imitate the situation.
    cmp -(sp), -(sp)
    jsr pc, nextType
    cmp (sp)+, (sp)+    ;imitate return from 2 functions (to protect the stack)
    ;if nextType could not advance the typo combination no longer, then we failed
    cmp (sp), #0
    beq failure1
    br runLetters
 end1:   ;we have 6 + X local variables in the stack. we get rid off them. and restore the registers
    add #2, sp
    add r4, sp
    mov (sp)+, r4
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r0
    mov (sp)+, r5
    tst (sp)+
    rts pc

    chkLetters:   ;comparing the current letters of the prefix and the word.
        cmpb (r0), (r1)
        bne callChk   ;not equal.
        cmpb (r0)+, (r1)+   ;go to testing the next letters.
        rts pc
    callChk:
        cmp r4, #0  ;check if X=0, if so we failed.
        beq failure4
        jsr pc, chkTypo
        rts pc
    failure4:   ;announcing failure in the stack an go back
        mov #0, 2(sp)
        rts pc

    chkTypo:   ;check if we got more typos to spare
        cmp r2, #0     ;check if we got more typos to spare
        bne callAct         ;if we have then continue testing
    rstTypos:   ;otherwise reset the "typos left" counter back to X
        add r4, sp
        mov 12(sp), r2
        sub r4, sp
        jsr pc, nextType    ;advance the typos combination
        rts pc
    callAct:                ;program found a typo and keeps testing
        sub #1, r2  ;now we have one less typos to spare

    ;advance the letters of the string and the term accourding to the type of typo we assume the string has.
    actTypo:    ;check what kind of typo we're cheking right now and act accordingly
        add r2, sp  ;we mov to r3 the type of typo we are checking right now.
        add r2, sp
        mov 6(sp), r3
        sub r2, sp
        sub r2, sp
        cmp r3, #1   ;letter got changed.
        beq type1
        cmp r3, #2   ;letter got deleted.
        beq type2
        cmp r3, #3   ;letter added by mistake.
        beq type3
    type1:
        cmpb (r0)+, (r1)+   ;move to the next letter in the string and in the term.
        rts pc
    type2:
        tstb (r1)+   ;move to the next letter in the prefix.
        rts pc
    type3:
        tstb (r0)+   ;move to the next letter in the word.
        rts pc

    nextType:   ;advance the type of typos combination. if we got to the end, send failure
        add r4, sp  ;we put X into r3, when r3 go to zero we know we are at the start of the "typo type" combination
        mov 14(sp), r3
        sub r4, sp
        mov #0, r4  ;represent how deep we continue in the stack, so we know how much to come back
        add #10, sp ;we scan the typos type from the end
        loop1:
            cmp (sp), #3    ;if the type is 3
            beq case3
        caseNot3:   ;advance the type and return
            add #1, (sp)    ;advance the type
            sub r4, sp  ;return with success ('1')
            tst -(sp)
            mov #1, (sp)
            sub #6, sp
            add r3, r4  ;restoring r4 to 2X
            add r3, r4
            add r4, sp  ;restoring the start adress of the "word" to r0 and the "prefix" to r1
            mov 16(sp), r0
            mov 20(sp), r1
            sub r4, sp
            rts pc
        case3:  ;turn to 1 and continue to the next one
            tstb -(r3)  ;we are one step closer to the start
            cmp r3, 0   ;if we are at the start of the typo combination
            beq failure2
            mov #1, (sp)    ;turn type back to 1
            cmp (sp)+, (r4)+    ;go to the next type, and increase r4 (how much we need to go back with the stack pointer)
            br loop1
    failure2:   ;return with failure ('0')
        tst (r4)+   ;restoring r4 to 2X
        sub r4, sp
        mov #0, (sp)    ;loading failure ('0') in output
        sub #6, sp
        rts pc


;Get `adrs` in linkage=r1. Get number-string stored at {input..pInput} and store it as
;integer in `adrs`. Also resets pInput = #input.
str2Num:
    mov r0, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov r4, -(sp)
    mov r5, -(sp)
    mov (r1)+, r0   ;r0 = `adrs`
    mov #input, r5  ;r5 is iterator
    clr r2          ;r2 = single char (to convert into decimal digit)
    clr r3          ;r3 = output number
    mov #10., r4
    str2NumLoop:
        movb (r5)+, r2
        sub #'0, r2
        ash #3, r3      ;shift r3 digits to the left (as octal)
        add r2, r3      ;insert r2-digit as last digit of r3
        cmp r5, pInput
        bne str2NumLoop
    mov #input, pInput
    mov r3, (r0)
    mov (sp)+, r5
    mov (sp)+, r4
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r0
    rts r1


;Stack: Address of source string (that ends with @).
;Inline: Address of destination string,
;       Control word: if 0-bit is set then copy the '@' also,
;                     if 1-bit is set then add single-quotes before and after.
;Link. reg: r5
copyStr:
    mov r0, -(sp)
    mov r1, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov 12(sp), r0      ;source word
    mov (r5)+, r1       ;dest word
    mov (r5)+, r2
    mov r2, r3
    bic #6, r2          ;r2 = boolean: copy '@'
    asr r3              ;r3 = boolean: add single-quotes to word
    tst r3
    beq copyStrLoop
    movb #'', (r1)+
    copyStrLoop:
        cmpb (r0), #'@
        beq copyStrFin
        movb (r0)+, (r1)+
        br copyStrLoop
 copyStrFin:
    tst r3
    beq copyStrAt
    movb #'', (r1)+
 copyStrAt:
    tst r2
    beq copyStrEnd
    movb #'@, (r1)+
 copyStrEnd:
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts r5


;takes the @-terminated string at `input`, appends it to the end of `sentence` and
;appends it at the end of the dictionary.
pushWord:
    mov r0, -(sp)
    mov r1, -(sp)   ;dict iterator
    mov r2, -(sp)
    mov #Dict, r1
    findDictEnd:
        tstb @(r1)           ;break if at end of dict
        beq endFindDictEnd
        add #2, r1
        mov (r1), r1
        br findDictEnd
 endFindDictEnd:     ;now r1 points to beginning of empty string at end of dict
    mov #input, r0          ;input string iterator
    mov userSentPtr, r2    ;output sentence iterator
    mov (r1), r1           ;dict term insertion iterator
    pushLoop:
        movb (r0), (r1)+
        movb (r0), (r2)+
        cmpb (r0)+, #'@
        bne pushLoop
    movb #' , -(r2) ;add space at end of sentence
    inc r2
    movb #'@, (r2)
    mov r2, userSentPtr ;set userSentPtr to the '@' at the end of the sentence
    mov #1, newWord     ;indicates new word in dictionary
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts pc


;Suggest next word completion. Iterates the dictionary starting at `pTerm` and suggests
;completions up to `maxTypos` typos. If dict is depleted then restart with maxTypos+1.
;If maxTypos > X then send failure message.
;Linkage reg = r4. If (r4)=1 then skips the first term.
compWord:
    mov r0, -(sp)
    mov r1, -(sp)
    mov r2, -(sp)
    mov r3, -(sp)
    mov r5, -(sp)
    tst (r4)        ;if parameter=1 then skip first word
    bne compLoop
    mov @pTerm, r0
    mov #input, r1
    mov maxTypos, r2
    jsr pc, dictPrefix          ;returns 0/1 in r1
    tst r1
    bne compEndLoop
    compLoop:
        add #2, pTerm
        mov @pTerm, pTerm       ;pTerm->next()
        mov @pTerm, r1
        tstb (r1)               ;if empty string (end of dict)
        bne notFinDict
            inc maxTypos
            mov #Dict, pTerm        ;restart from beginning of dict
            cmp maxTypos, X
            bhi compFail
        notFinDict:
        mov @pTerm, r0
        mov #input, r1
        mov maxTypos, r2
        jsr pc, dictPrefix      ;returns 0/1 in r1
        tst r1
        beq compLoop
    compEndLoop:        ;pTerm points to term
    clr firstSuggest
    tst maxTypos
    beq comp0Typos
        mov #3, pStatus     ;print "do you mean '<word>'? y/n"
        mov #12., listPtr
        mov @pTerm, -(sp)
        jsr r5, copyStr     ;copyStr(&pTerm, &string, addQuotes=True, add@=True)
        .word string
        .word 3
        tst (sp)+
        mov #1, status      ;status = y/n
        br compEnd
    comp0Typos:
        mov #2, pStatus     ;just print the suggested word
        mov @pTerm, -(sp)
        jsr r5, copyStr     ;copyStr(&pTerm, &string, addQuotes=False, add@=True)
        .word string
        .word 1
        tst (sp)+
        mov #2, status      ;status = enter / spacebar
        br compEnd
    compFail:
    mov #17., listPtr           ;print message 17 ...
    add firstSuggest, listPtr   ;... or 18
    mov #3, pStatus
    mov #input, -(sp)
    jsr r5, copyStr         ;copyStr(&input, &string, addQuotes=True, add@=True)
    .word string            ;(prints the user's input in the message)
    .word 3
    tst (sp)+
 compEnd:
    tst (r4)+
    mov (sp)+, r5
    mov (sp)+, r3
    mov (sp)+, r2
    mov (sp)+, r1
    mov (sp)+, r0
    rts r4


;handle keyboard interrupt
keyboard:
    mov r0, -(sp)
    mov r1, -(sp)
    mov r4, -(sp)
    mov r5, -(sp)
    mov tkb, r0
    cmpb r0, #BACKSPACE
    beq kbdBackspace
    mov status, r1
    asl r1
    add #kbdSubrouties, r1
    jmp @(r1)   ;go to kbdSubrouties[status]
    kbdWord:            ;todo decrement wrdsLeft in some cases
        cmp r0, #'!
        beq kbdAutocomp
        cmp r0, #'      ;space
        beq kbdFinWord
        cmp r0, #'.
        beq kbdFinSentence  ;Wooohooooo!
        movb r0, @pInput
        inc pInput
        br kbdEcho
    kbdAutocomp:            ;user pressed '!'
            clr maxTypos        ;begin by searching 0-typos prefix
            mov #Dict, pTerm    ;start from beginning of dict
            mov #1, firstSuggest
            movb #'@, @pInput    ;append @ at end of input string ;todo remove afterwards
            jsr r4, compWord
            .word 0
            br enablePrint

    kbdFinWord:         ;if user pressed space
            movb #'@, @pInput   ;end word with a @
            jsr pc, pushWord    ;append word at end of sentence and insert it to dictionary
            mov #2, pStatus     ;set print status = print word
            mov #input, -(sp)
            jsr r5, copyStr     ;copyStr(&input, &string, addQuotes=True, add@=True)
            .word string
            .word 3
            tst (sp)+
            mov #input, pInput  ;todo dec wrdsLeft. change stuff about pushWord. Check if wrdsLeft==0
            br enablePrint
    kbdFinSentence:
            mov #14., listPtr
            dec userSentPtr
            movb #'@, @userSentPtr
            br kbdEcho

    kbdYn:          ;get y/n from user
        ;todo
    kbd0Typos:      ;get enter / spacebar from user
        cmp #' , r0     ;user pressed space
        bne kbdEnter
        mov @pTerm, -(sp)
        mov userSentPtr, 4(pc)  ;todo test
        jsr r5, copyStr     ;copyStr(<selected term>, <end of sentence>, addQuotes=False, add@=True)
        .word 0, 1
        jsr r5, copyStr     ;copyStr(<selected term>, <printout>, addQuotes=True, add@=True)
        .word string, 3
        tst (sp)+
        mov #input, pInput  ;reset input pointer
        jsr pc, endWord
        br enablePrint
    kbdEnter:           ;user pressed enter ("no")
            jsr r4, compWord
            .word 1
            br enablePrint


    kbdTimeLeft:
    kbdWrdsLeft:
        cmp r0, #CR
        beq kbdFinWrdsLeft
        movb r0, @pInput
        inc pInput
        br kbdEcho
    kbdFinWrdsLeft:
            jsr r1, str2Num
            .word wrdsLeft
            mov #timeLeft, -10(pc)
            inc status
            cmp status, #6  ;if user has just inserted timeLeft
            blt kbdEcho
            mov #1, status  ;then go to status 1 (read words from user)
            inc cls         ;and start the countdown
            br kbdEcho


    kbdBackspace:
        cmp pInput, #input  ;if we're on the first char of input then ignore
        beq kbdEnd
        dec pInput          ;delete last char in `input`
        mov #1, backsStt    ;otherwise, start the backspace procedure
        br enablePrint

    kbdEcho:
        mov #2, pStatus
    enablePrint:
        ;todo bic tks, ieMask     ;keyboard IE=0
        ;todo bis tps, ieMask     ;printer IE=1
    kbdEnd:
        inc tks ;todo remove
        mov (sp)+, r5
        mov (sp)+, r4
        mov (sp)+, r1
        mov (sp)+, r0
        rti

;Performs wrdsLeft-- . If wrds depleted then set `end`.
endWord:
    dec wrdsLeft
    bne endEndWord
    inc end
 endEndWord:
    rts pc


ieMask:         .word 100
input:          .blkw MAX_INPUT
pInput:         .word input
backsStt:       .word 0         ;set when the last printed char needs to be deleted (backspace)
userSentPtr:    .word sentence  ;points to the current end of the user-input sentence.
maxTypos:       .word 0
newWord:        .word 0         ;set when word inserted into dict. reset when done sorting.
pTerm:          .word 0         ;points to the next term that we test against the input
firstSuggest:   .word 0         ;set when looking for completion for the first time for a given prefix

.even
kbdSubrouties:  .word kbdWord, kbdYn, kbd0Typos, kbdWrdsLeft, kbdTimeLeft

sentPtr:        .word 0
listPtr:        .word 0
status:         .word 0     ;enumeration according to kbdSubrouties ;todo set to kbdWrdsLeft
pStatus:        .word 0     ;1=echo; 2=word; 3=message
end:            .word 0     ;enum: 0=still running, 1=finished (time's up / wrdsLeft=0 / fullstop)
wrdsLeft:       .word 0
timeLeft:       .word 0
curWord:        .blkw 60.
curLetter:      .word 0
string:         .blkw 60.
pointer:        .word 0
sort:           .word 0
quantiSecond:   .word 0
sentence:       .blkw 1500



sent1:  .ascii   <Please enter length of the message:>
        .byte LF, CR
        .ascii <@>
sent2:  .ascii   <\nPlease enter number of seconds to finish the message:>
        .byte LF, CR
        .ascii <@>
sent3: .ascii   <\nYou can start to write your message.>
        .byte LF, CR
        .ascii <@>
sent4:  .ascii   <Don't worry we'll assist you!>
        .byte LF, CR
        .ascii <@>
sent5:  .ascii   < was added to the message!>
        .byte LF, CR
        .ascii <@>
sent6:  .ascii   <The message is: @>
sent7:  .ascii   <.>
        .byte LF, CR
        .ascii <@>
sent8:  .ascii   <Time left: @>
sent9:  .ascii   < seconds>
        .byte LF, CR
        .byte LF, CR
        .ascii <@>
sent10: .ascii  <Sorry @>
sent11: .ascii  < not in our dictionary!>
        .byte LF, CR
        .ascii <@>
sent12: .ascii  <Do you mean @>
sent13: .ascii  < y/n?>
        .byte LF, CR
        .ascii <@>
sent14: .ascii  <Thank you!>
        .byte LF, CR
        .ascii <@>
sent15: .ascii  <Bye Bye!@>
sent16: .ascii  <Sorry Time is up!>
        .byte LF, CR
        .ascii <@>
sent17: .ascii  < has no other suggestions in our dictionary!>
        .byte LF, CR, '@
sent18: .ascii  < not in our dictionary!>
        .byte LF, CR, '@



.=torg + 12000

X:          .word 1

Dict:
node1:      .word str1, node2
node2:      .word str2, node3
node3:      .word str3, node4
node4:      .word str4, node5
node5:      .word str5, node6
node6:      .word str6, node7
node7:      .word str7, node8
node8:      .word str8, node9
node9:      .word str9, node10
node10:     .word str10, 0

str1:           .ascii  <go@>
str2:           .ascii  <hook@>
str3:           .ascii  <robe@>
str4:           .ascii  <room@>
str5:           .ascii  <rose@>
.even
str6:       .blkw 5
str7:       .blkw 5
str8:       .blkw 5
str9:       .blkw 5
str10:      .blkw 5

ExpectedDict:
_node1:     .word _str1, _node2
_node2:     .word _str2, _node3
_node3:     .word _str3, _node4
_node4:     .word _str4, _node5
_node5:     .word _str5, _node6
_node6:     .word _str6, _node7
_node7:     .word _str7, _node8
_node8:     .word _str8, _node9
_node9:     .word _str9, _node10
_node10:    .word _str10, 0

_str1:      .ascii  <I@>
_str2:      .ascii  <a@>
_str3:      .ascii  <book@>
_str4:      .ascii  <buy@>
_str5:      .ascii  <go@>
_str6:      .ascii  <hook@>
_str7:      .ascii  <robe@>
_str8:      .ascii  <room@>
_str9:      .ascii  <rose@>
_str10:     .ascii  <should@>