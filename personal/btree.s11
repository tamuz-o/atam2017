. = torg + 1000

main:
    mov pc, sp
    tst -(sp)
    mov #12, -(sp)
    mov #33, -(sp)
    tst -(sp)
    jsr pc, sum
    mov (sp), r0
    tst (sp)+
    tst (sp)+
    halt

;input stack head = return-adrs -> result(empty) -> n1 -> n2 -> ...
sum:
    mov 4(sp), 2(sp)
    add 6(sp), 2(sp)
    rts pc

;Gets a tree node and returns the max integer stored in the subtree.
;input stack head = max (output) -> nodeAddress -> {stack}
;usage stack head -> tempMax -> max (output) -> nodeAddress (input) -> {stack}
treeMax:
    mov @2(sp), -(sp)       ;store node's value as tempMax

    jsr pc, treeMax
    cmp (sp), 2(sp)
    blt notBigger
    mov (sp), 2(sp)
notBigger:
    jsr pc, treeMax


. = torg + 5000
;______4_______
; _2_     _8_
; 1 9    7   5
;   6    6

root:   .word 4, n01, n05
n01:    .word 2, n02, n03
n02:    .word 1, 0, 0
n03:    .word 9, n04, 0
n04:    .word 6, 0, 0
n05:    .word 8, n06, n08
n06:    .word 7, n07, 0
n07:    .word 6, 0, 0
n08:    .word 5, 0, 0
